stages:
  - test
  - doc
  - token
  - pypi

variables:
  PIP_INDEX_URL: https://artifactory.audeering.com/artifactory/api/pypi/pypi/simple

.pytest:
  before_script:
    - apt-get update
    - apt-get install -y curl jq pandoc libsndfile1
    - export ARTIFACTORY_USERNAME=${username}
    - export ARTIFACTORY_API_KEY=${api_key}
    - export TWINE_USERNAME=${username}
    - export TWINE_PASSWORD=${api_key}
  script:
    - pip install -r requirements.txt
    - pip install -r tests/requirements.txt
    - python -m pytest

python-3.6:
  extends: .pytest
  stage: test
  image: docker.audeering.com/python:3.6

python-3.7:
  extends: .pytest
  stage: test
  image: docker.audeering.com/python:3.7

python-3.8:
  extends: .pytest
  stage: test
  image: docker.audeering.com/python:3.8

docs:
  extends: .pytest
  stage: test
  image: docker.audeering.com/python:3.7
  script:
    - pip install -r requirements.txt
    - pip install -r docs/requirements.txt
    - python -m sphinx -W docs/ build/html -b html
    - python -m sphinx -W docs/ build/linkcheck -b linkcheck
  artifacts:
    paths:
      - build/

pages:
  stage: doc
  image: docker.audeering.com/alpine
  variables:
    GIT_STRATEGY: none  # disable git fetch
  script:
    - cp -r build/html public
  dependencies:
    - docs
  artifacts:
    paths:
      - public
  only:
    refs:
      - tags

generate-token:
  stage: token
  image: docker.audeering.com/alpine
  before_script:
    - apk --no-cache add git curl bash
  script:
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${GITLAB_USER_LOGIN}/artifactory-tokenizer.git
    - cd artifactory-tokenizer
    - bash get_token.sh "readers,deployers" > ../token.json
  artifacts:
    paths:
      - token.json
    expire_in: 20 mins
  only:
    refs:
      - tags

pypi:
  stage: pypi
  image: docker.audeering.com/python:3.6
  variables:
    TWINE_REPOSITORY_URL: https://artifactory.audeering.com/artifactory/api/pypi/pypi
  before_script:
    - apt-get update
    - apt-get install -y jq
    - export TWINE_USERNAME=${GITLAB_USER_LOGIN}
    - export TWINE_PASSWORD=$(cat token.json | jq -r '.access_token')
    - pip install twine
  script:
    - python setup.py sdist bdist_wheel
    - python -m twine upload --repository local dist/*
  dependencies:
    - generate-token
  only:
    refs:
      - tags

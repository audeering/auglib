stages:
  - prepare
  - test
  - doc
  - pypi

variables:
  ARTIFACTORY_GROUPS: "readers,deployers"
  ARTIFACTORY_TOKEN_VARS: "ARTIFACTORY_API_KEY,TWINE_PASSWORD"
  ARTIFACTORY_USERNAME_VARS: "ARTIFACTORY_USERNAME,TWINE_USERNAME"

include:
  - project: 'devops/artifactory-token-helper'
    file: '/.gitlab-ci-artifactory-token.yml'

.pytest:
  image: docker.audeering.com/audeering/python-3.8:latest
  before_script:
    - python -V
  script:
    - pip install -r requirements.txt
    - pip install -r tests/requirements.txt
    - python -m pytest

python-3.8:
  extends: .pytest
  stage: test

docs:
  extends: .pytest
  stage: test
  script:
    - pip install -r requirements.txt
    - pip install -r docs/requirements.txt
    # Create Artifactory config script to manage user access
    - echo -e "[artifactory.audeering.com/artifactory]\nusername = ${ARTIFACTORY_USERNAME}\npassword = ${ARTIFACTORY_API_KEY}\n" >~/.artifactory_python.cfg
    # Allow anonymous access
    - unset ARTIFACTORY_USERNAME
    - unset ARTIFACTORY_API_KEY
    # Copy audb config file to correct location
    - cp docs/audb.yaml ~/.audb.yaml
    - python -m sphinx -W docs/ build/html -b html
    - python -m sphinx -W docs/ build/html -b linkcheck
  artifacts:
    paths:
      - build/

pages:
  stage: doc
  image: docker.audeering.com/alpine
  variables:
    GIT_STRATEGY: none  # disable git fetch
  script:
    - cp -r build/html public
  dependencies:
    - docs
  artifacts:
    paths:
      - public
  only:
    refs:
      - tags

pypi:
  extends: .pytest
  stage: pypi
  script:
    - python setup.py sdist bdist_wheel
    - python -m twine upload --repository local dist/*
  only:
    refs:
      - tags

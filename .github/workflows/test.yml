name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    # Make sure .bashrc is read by shell for micromamba,
    # see https://github.com/mamba-org/setup-micromamba#about-login-shells
    defaults:
      run:
        shell: bash -l {0}

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
        python-version: [ '3.10' ]
        include:
          - os: ubuntu-latest
            python-version: '3.11'
            tasks: tests
          - os: ubuntu-latest
            python-version: '3.9'
            tasks: tests

    steps:
    - uses: actions/checkout@v4

    - name: Cache emodb
      uses: actions/cache@v4
      with:
        path: ~/audb/emodb/1.4.1
        key: emodb-1.4.1

    - name: Set up Python ${{ matrix.python-version }} with Micromamba
      uses: mamba-org/setup-micromamba@v1
      with:
        cache-environment: true
        environment-name: venv
        create-args: >-
          pip
          python=${{ matrix.python-version }}

    - name: Activate Python virtual environment
      run: micromamba activate venv

    - name: Install sox with Micromamba
      run: micromamba install sox

    - name: Ubuntu - install audio packages
      run: |
        sudo apt-get update
        sudo apt-get install --no-install-recommends --yes libsndfile1 ffmpeg libavcodec-extra
      if: matrix.os == 'ubuntu-latest'

    - name: OSX - install audio packages
      run: brew install ffmpeg mediainfo
      if: matrix.os == 'macOS-latest'

    - name: Windows - install audio packages
      run: choco install ffmpeg mediainfo-cli
      if: matrix.os == 'windows-latest'

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # TESTS
    - name: Install tests requirements
      run: pip install -r tests/requirements.txt

    - name: Test with pytest
      run: python -m pytest

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
      if: matrix.os == 'ubuntu-latest'
